# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JsN5UohL1IQpD0QuQn7wbhf59PND8sg0
"""

!pip install netcdf4

import netCDF4
import numpy as np
from datetime import datetime, timedelta

def fetch_data(stn):
    data_url = f'http://thredds.cdip.ucsd.edu/thredds/dodsC/cdip/realtime/{stn}p1_rt.nc'
    nc = netCDF4.Dataset(data_url)
    return nc

def to_pst(time_var, time_val):
    utc_time = netCDF4.num2date(time_val, time_var.units)
    pst_time = utc_time - timedelta(hours=7)  # Convert to PST
    return pst_time

def main():
    stations = ['045', '264']
    conversion_factor = 3.28084

    for stn in stations:
        nc = fetch_data(stn)

        # Fetch variables
        wave_time_var = nc.variables['waveTime']
        wave_hs_var = nc.variables['waveHs']
        wave_tp_var = nc.variables['waveTp']
        wave_frequency_var = nc.variables['waveFrequency']
        wave_bandwidth_var = nc.variables['waveBandwidth']

        if 'wavePeakPSD' in nc.variables:
            wave_energy_density_var = nc.variables['wavePeakPSD']
        else:
            wave_energy_density_var = nc.variables['waveEnergyDensity']

        # Get the most recent time event
        latest_time_idx = -1
        latest_time_val = wave_time_var[latest_time_idx]
        latest_time_pst = to_pst(wave_time_var, latest_time_val)

        # Get the corresponding values for the latest time event
        latest_wave_hs = wave_hs_var[latest_time_idx] * conversion_factor
        latest_wave_tp = wave_tp_var[latest_time_idx]
        latest_wave_frequency = wave_frequency_var[:]
        latest_wave_bandwidth = wave_bandwidth_var[:]
        if len(wave_energy_density_var.shape) == 2:
          latest_wave_energy_density = wave_energy_density_var[latest_time_idx, :]
        else:
          latest_wave_energy_density = wave_energy_density_var[:]

        # Calculate Pierson-Moskowitz Length Adjusted Significant wave height
        # Comment out the line below when using the most recent set of values
        mean_wave_energy_density = np.mean(latest_wave_energy_density, axis=0)

        # Uncomment the line below when using the most recent set of values
        latest_wave_energy_density_values = latest_wave_energy_density.reshape(-1, 1)
        latest_wave_bandwidth_reshaped = latest_wave_bandwidth.reshape(-1, 1)

        latest_wave_bandwidth_reshaped = latest_wave_bandwidth.reshape(-1)

        # Comment out the line below when using the most recent set of values
        pm_length_adjusted_hs = np.trapz(mean_wave_energy_density * latest_wave_bandwidth, latest_wave_frequency) * 16 * np.pi**2 / (latest_wave_tp**4)

        # Uncomment the line below when using the most recent set of values
        pm_length_adjusted_hs_latest = np.trapz(latest_wave_energy_density_values * latest_wave_bandwidth_reshaped, latest_wave_frequency) * 16 * np.pi**2 / (latest_wave_tp**4)

        # Comment out the line below when using the most recent set of values
        pm_length_adjusted_hs = (pm_length_adjusted_hs * conversion_factor) ** 0.5

        # Uncomment the line below when using the most recent set of values
        pm_length_adjusted_hs_latest = (pm_length_adjusted_hs_latest * conversion_factor) ** 0.5

        print(f"Buoy {stn}:")
        print(f"  Latest Time (PST): {latest_time_pst}")
        print(f"  Significant Wave Height (feet): {latest_wave_hs:.2f}")
        
        # Comment out the line below when using the most recent set of values
        print(f"  Pierson-Moskowitz Length Adjusted Significant Wave Height (feet): {float(pm_length_adjusted_hs):.2f}")

        # Uncomment the line below when using the most recent set of values
        print(f"  Pierson-Moskowitz Length Adjusted Significant Wave Height (latest values, feet): {pm_length_adjusted_hs_latest.compressed()[0]:.2f}")



if __name__ == "__main__":
    main()

import netCDF4
import numpy as np
from datetime import datetime, timedelta

def get_latest_data(stn):
    data_url = f"http://thredds.cdip.ucsd.edu/thredds/dodsC/cdip/realtime/{stn}p1_rt.nc"
    nc = netCDF4.Dataset(data_url)
    
    wave_time_var = nc.variables["waveTime"]
    wave_peak_psd_var = nc.variables["wavePeakPSD"]
    wave_tp_var = nc.variables["waveTp"]
    wave_hs_var = nc.variables["waveHs"]
    wave_frequency_var = nc.variables["waveFrequency"]
    wave_bandwidth_var = nc.variables["waveBandwidth"]
    
    latest_time_idx = -1
    latest_wave_time = wave_time_var[latest_time_idx]
    latest_wave_time_pst = netCDF4.num2date(latest_wave_time, wave_time_var.units) - timedelta(hours=7)
    latest_wave_peak_psd = wave_peak_psd_var[latest_time_idx]
    latest_wave_tp = wave_tp_var[latest_time_idx]
    latest_wave_hs = wave_hs_var[latest_time_idx] * 3.28084
    latest_wave_frequency = wave_frequency_var[:]
    latest_wave_bandwidth = wave_bandwidth_var[:]
    
    return (latest_wave_time_pst, latest_wave_hs, latest_wave_peak_psd, latest_wave_tp, latest_wave_frequency, latest_wave_bandwidth)

def calculate_pm_length_adjusted_swh(latest_wave_peak_psd, latest_wave_tp, latest_wave_frequency, latest_wave_bandwidth):
    pm_length_adjusted_hs = np.trapz(latest_wave_peak_psd * latest_wave_bandwidth, latest_wave_frequency) * 16 * np.pi**2 / (latest_wave_tp**4)
    return pm_length_adjusted_hs * 3.28084

buoys = ["045", "264"]

for buoy in buoys:
    latest_data = get_latest_data(buoy)
    latest_wave_time_pst, latest_wave_hs, latest_wave_peak_psd, latest_wave_tp, latest_wave_frequency, latest_wave_bandwidth = latest_data
    pm_length_adjusted_hs = calculate_pm_length_adjusted_swh(latest_wave_peak_psd, latest_wave_tp, latest_wave_frequency, latest_wave_bandwidth)
    
    print(f"Buoy {buoy}:")
    print(f"  Latest Time (PST): {latest_wave_time_pst}")
    print(f"  Significant Wave Height (feet): {latest_wave_hs:.2f}")
    print(f"  Pierson-Moskowitz Length Adjusted Significant Wave Height (feet): {pm_length_adjusted_hs:.2f}")

    print(latest_wave_bandwidth)
    print(latest_wave_frequency)
    print(latest_wave_peak_psd)

import netCDF4
import numpy as np
import datetime as dt
import pytz

buoys = ['045', '264']

for buoy in buoys:
    url = f"http://thredds.cdip.ucsd.edu/thredds/dodsC/cdip/realtime/{buoy}p1_rt.nc"
    dataset = netCDF4.Dataset(url)

    wave_hs_var = dataset.variables['waveHs']
    wave_tp_var = dataset.variables['waveTp']
    wave_time_var = dataset.variables['waveTime']
    wave_energy_density_var = dataset.variables['waveEnergyDensity']
    wave_frequency_var = dataset.variables['waveFrequency']
    wave_bandwidth_var = dataset.variables['waveBandwidth']

    latest_time_idx = -1
    latest_wave_hs = wave_hs_var[latest_time_idx] * 3.28084  # Convert meters to feet
    latest_wave_tp = wave_tp_var[latest_time_idx]
    latest_wave_time = wave_time_var[latest_time_idx]
    latest_wave_energy_density = wave_energy_density_var[latest_time_idx, :]

    latest_wave_frequency_reshaped = latest_wave_frequency.reshape(1, -1)
    latest_wave_bandwidth_reshaped = latest_wave_bandwidth.reshape(1, -1)

    # Calculate Pierson-Moskowitz Length Adjusted Significant Wave Height
    pm_length_adjusted_hs = np.trapz(latest_wave_energy_density * latest_wave_bandwidth_reshaped, latest_wave_frequency_reshaped) * 16 * np.pi**2 / (latest_wave_tp**4)
    pm_length_adjusted_hs_feet = pm_length_adjusted_hs * 3.28084  # Convert meters to feet

    # Convert wave time to datetime object and adjust to the desired timezone
    wave_time_dt = dt.datetime.fromtimestamp(latest_wave_time, tz=pytz.UTC)
    wave_time_dt_pst = wave_time_dt.astimezone(pytz.timezone('US/Pacific'))

    print(f"Buoy {buoy}:")
    print(f"  Latest Time (PST): {wave_time_dt_pst}")
    print(f"  Significant Wave Height (feet): {latest_wave_hs:.2f}")
    #print(f"  Pierson-Moskowitz Length Adjusted Significant Wave Height (feet): {pm_length_adjusted_hs_feet:.2f}")
    print(f"  New Length Adjusted Significant Wave Height (feet): {float(pm_length_adjusted_hs_feet):.2f}")


dataset.close()

import numpy as np
import netCDF4
from datetime import datetime, timedelta
import pytz

buoy_ids = ['045', '264']

for buoy_id in buoy_ids:
    url = f"http://thredds.cdip.ucsd.edu/thredds/dodsC/cdip/realtime/{buoy_id}p1_rt.nc"

    print(url)

    with netCDF4.Dataset(url) as ds:
        # Get the necessary variables
        wave_time_var = ds.variables['waveTime']
        wave_energy_density_var = ds.variables['waveEnergyDensity']
        wave_frequency_var = ds.variables['waveFrequency']
        wave_bandwidth_var = ds.variables['waveBandwidth']
        wave_hs_var = ds.variables['waveHs']
        wave_tp_var = ds.variables['waveTp']

        # Get the latest time index
        latest_time_idx = -1

        # Get the latest values for the necessary variables
        latest_wave_time = wave_time_var[latest_time_idx]
        latest_wave_energy_density = wave_energy_density_var[latest_time_idx, :]
        latest_wave_frequency = wave_frequency_var[:]
        latest_wave_bandwidth = wave_bandwidth_var[:]
        latest_wave_hs = wave_hs_var[latest_time_idx]
        latest_wave_tp = wave_tp_var[latest_time_idx]

        # Reshape the 1D arrays for broadcasting
        latest_wave_frequency_reshaped = latest_wave_frequency.reshape(1, -1)
        latest_wave_bandwidth_reshaped = latest_wave_bandwidth.reshape(1, -1)

        # Calculate the length adjusted significant wave height
        new_length_adjusted_hs = np.trapz(latest_wave_energy_density * latest_wave_bandwidth_reshaped, latest_wave_frequency_reshaped) * 16 * np.pi**2 / (latest_wave_tp**4)
        new_length_adjusted_hs = (new_length_adjusted_hs) * 3.28084

        # Convert the wave time to a readable format in PST
        latest_wave_time_utc = datetime.utcfromtimestamp(latest_wave_time)
        latest_wave_time_pst = latest_wave_time_utc.replace(tzinfo=pytz.UTC).astimezone(pytz.timezone('US/Pacific'))

        # Print the results
        print(f"Buoy {buoy_id}:")
        print(f"  Latest Time (PST): {latest_wave_time_pst.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"  Significant Wave Height (feet): {latest_wave_hs * 3.28084:.2f}")
        print(f"  New Length Adjusted Significant Wave Height (feet): {float(new_length_adjusted_hs):.2f}")